while (!inputJsonQueue.isEmpty()) {
					++tweetCount;
					JSONObject tweet = inputJsonQueue.remove();

					if (!tweet.containsKey("linkTitle")
							&& !tweet.containsKey("hasBadLink")) { // only consider new tweets
						String text = tweet.get("text").toString();
						String maybeUrlString = getUrlString(text); // read maybe as "could be null or..."

						if (maybeUrlString != null) {
							++matchCount;
							String urlString = maybeUrlString;

							if (verbose) {
								System.out.println("URL: " + urlString);
							}

							String maybeTitleOrEmpty = getTitle(urlString);

							if (maybeTitleOrEmpty != null) {
								String titleOrEmpty = maybeTitleOrEmpty;

								if (!titleOrEmpty.isEmpty()) {
									++titleCount;
									String title = titleOrEmpty;
									tweet.put("linkTitle", title);

									if (verbose) {
										System.out.println("Title: \"" + title
												+ "\" from tweet "
												+ Integer.toString(tweetCount));
									}

								} else {
									tweet.put("hasBadLink", true);
								}
							}
						}
					}

					outputJsonQueue.add(tweet);
}
    // follows the link specified by url and if the response is html, returns
	// the title as a string
	public static String getTitle(String urlString) {
		String title = null;
		try {
			Document doc = Jsoup.connect(urlString).timeout(crawlTimeoutMs).get();
			title = doc.title();
		} catch (IOException e) {
			title = "";
			if (verbose) {
				System.out.println(e.getMessage());
			}
		}

		return title;
	}

	// attempts to find the last url in a string of text, returns null otherwise
	// based on a snippet found at
	// http://stackoverflow.com/questions/285619/how-to-detect-the-presence-of-url-in-a-string
	// might still be cases where the regex results in an invalid url
	public static String getUrlString(String text) {
		String[] words = text.split("\\s+|‚Äù|\"");
		String urlString = null;

		for (String word : words) try {
				URL url = new URL(word); // parse with URL constructor				
				urlString = url.toString(); // but just returns a string
				
				if (urlString.endsWith(".")) {
					urlString = urlString.substring(0, urlString.length()-1); // shave off "."
				}
			} catch (MalformedURLException e) {
				// Exception-based control flow FTW
			}

		return urlString;
	}